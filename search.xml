<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>位运算符</title>
      <link href="/2020/05/23/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2020/05/23/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>位运算符主要是以二进制规则进行运算</p></blockquote><h4 id="1-与（-amp-）运算符"><a href="#1-与（-amp-）运算符" class="headerlink" title="1.与（&amp;）运算符"></a>1.与（&amp;）运算符</h4><p>使用规则：两个二进制操作数对应位同为1  结果位  才为1，其余情况为0；<br>例如：<font color="red">整数 a = 15     &emsp; 整数 b = 127</font><br>计算：(a &amp; b)</p><blockquote><p><strong>15</strong> 的二进制位：<strong>0000 1111</strong><br><strong>127</strong> 的二进制为：<strong>0111 1111</strong>  </p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020052319311123.png" alt="在这里插入图片描述"><br><strong>即：(a &amp; b) = 15</strong></p><h4 id="2-或（-）运算符"><a href="#2-或（-）运算符" class="headerlink" title="2.或（|）运算符"></a>2.或（|）运算符</h4><p>使用规则：两个二进制操作数对应位只要有一个为1 结果位 就为1，其余情况为0；<br>例如：<font color="red">整数 b = 127     &emsp; 整数 c = 128</font><br>计算：(b | c)</p><blockquote><p><strong>127</strong> 的二进制位：<strong>0111 1111</strong><br><strong>128</strong>  的二进制位：<strong>1000 0000</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200523193734810.png" alt="在这里插入图片描述"><br><strong>即：(b | c) = 255</strong></p><h4 id="3-非（-）运算符"><a href="#3-非（-）运算符" class="headerlink" title="3.非（~）运算符"></a>3.非（~）运算符</h4><p>使用规则：一个二进制操作数，对应位为0，结果位为1；对应位为1，结果位为0；<br>作用是将每位二进制取反<br>例如：<font color="red">整数 d = 1 </font><br>计算：(~d)<br>十进制 <strong>1</strong> 的二进制表示为：</p><blockquote><p><strong>0000 0001</strong></p></blockquote><p>每位都取反为：</p><blockquote><p><strong>1111 1110</strong></p></blockquote><p>这是内存中的保存形式。我们读取的十进制是根据原码来读取，而在内存中，数值都是以二进制补码形式存储的。正数的补码和原码一样，负数的补码得到过程：原码 转 反码 再转 补码</p><blockquote><p><font color="red"><strong>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</strong></font><br><strong>传送门：<a href="https://blog.csdn.net/mofeigege/article/details/106295359" target="_blank" rel="noopener">原码, 反码, 补码 详解</a></strong></p></blockquote><p>然后计算取反后的补码，其真值就是结果。<br><img src="https://img-blog.csdnimg.cn/20200523195253358.png" alt="在这里插入图片描述"><br><strong>即：(~d) = 1</strong></p><h4 id="4-异或（-）运算符"><a href="#4-异或（-）运算符" class="headerlink" title="4.异或（^）运算符"></a>4.异或（^）运算符</h4><p>使用规则：两个二进制操作数对应位相同为0，不同为1;<br>例如：<font color="red">整数 e = 2    &emsp; 整数 f= 3</font><br>计算：(e ^ f) </p><blockquote><p><strong>2</strong> 的二进制位：<strong>0000 0010</strong><br><strong>3</strong> 的二进制位：<strong>0000 0011</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200523194603181.png" alt="在这里插入图片描述"></p><p><strong>即：(e ^ f) = 1</strong></p><h4 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5.代码实现"></a>5.代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">bitwise</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a和b的 与运算 结果为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b和c的 或运算 结果为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">|</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d 非运算 的结果为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e和f 异或运算 的结果为: "</span>  <span class="token operator">+</span> <span class="token punctuation">(</span>e <span class="token operator">^</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运算结果：</p><pre class=" language-java"><code class="language-java">a和b的 与运算 结果为：<span class="token number">15</span>b和c的 或运算 结果为：<span class="token number">255</span>d 非运算 的结果为：<span class="token operator">-</span><span class="token number">2</span>e和f 异或运算 的结果为<span class="token operator">:</span> <span class="token number">1</span></code></pre><h4 id="移位运算符"><a href="#移位运算符" class="headerlink" title="移位运算符"></a>移位运算符</h4><p><img src="hexoblog/themes/hexo-theme-matery/source/bitwise.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码，反码，补码（详解）</title>
      <link href="/2020/05/23/%E6%BA%90%E7%A0%81%E5%8F%8D%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/05/23/%E6%BA%90%E7%A0%81%E5%8F%8D%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;本篇文章讲解了计算机的原码, 反码和补码. 并且进行了深入探求了为何要使用反码和补码, 以及更进一步的论证了为何可以用反码, 补码的加法计算原码的减法. 论证部分如有不对的地方请各位牛人帮忙指正! 希望本文对大家学习计算机基础有所帮助!</p><h3 id="一-机器数和真值"><a href="#一-机器数和真值" class="headerlink" title="一. 机器数和真值"></a><font color="red">一. 机器数和真值</h3><p>在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念.</p><ul><li>1、机器数</li></ul><p>一个数在计算机中的二进制表示形式,  叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1。</p><blockquote><p>比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011 。那么，这里的 00000011 和 10000011 就是机器数。</p></blockquote><ul><li>2、真值</li></ul><p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 -3 而不是形式值131（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p><blockquote><p>例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1</p></blockquote><h3 id="二-原码-反码-补码的基础概念和计算方法"><a href="#二-原码-反码-补码的基础概念和计算方法" class="headerlink" title="二. 原码, 反码, 补码的基础概念和计算方法."></a><font color="red">二. 原码, 反码, 补码的基础概念和计算方法.</h3><p>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式.</p><h6 id="1-原码"><a href="#1-原码" class="headerlink" title="1. 原码"></a><font color="red">1. 原码</h6><p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:</p><blockquote><p>[+1]原 = 0000 0001</p></blockquote><blockquote><p>[-1]原 = 1000 0001</p></blockquote><p>第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:</p><blockquote><p><strong>[1111 1111 , 0111 1111]</strong></font></p></blockquote><p>即</p><blockquote><p><strong>[-127 , 127]</strong></font></p></blockquote><p>原码是人脑最容易理解和计算的表示方式.</p><h6 id="2-反码"><a href="#2-反码" class="headerlink" title="2. 反码"></a><font color="red">2. 反码</h6><p>反码的表示方法是:</p><p><strong>正数的反码是其本身</strong></p><p><strong>负数的反码是在其原码的基础上, 符号位不变，其余各个位取反</strong></p><blockquote><p>[+1] = [00000001]原 = [00000001]反</p></blockquote><blockquote><p>[-1] = [10000001]原 = [11111110]反</p></blockquote><p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.</p><h6 id="3-补码"><a href="#3-补码" class="headerlink" title="3. 补码"></a><font color="red">3. 补码</h6><p>补码的表示方法是:</p><p><strong>正数的补码就是其本身</strong></p><p><strong>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</strong></p><blockquote><p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p></blockquote><blockquote><p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p></blockquote><p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码再计算其数值.</p><h3 id="三-为何要使用原码-反码和补码"><a href="#三-为何要使用原码-反码和补码" class="headerlink" title="三. 为何要使用原码, 反码和补码"></a><font color="red">三. 为何要使用原码, 反码和补码</h3><p>在开始深入学习前, 我的学习建议是先”死记硬背”上面的原码, 反码和补码的表示方式以及计算方法.</p><p>现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数因为三种编码方式的结果都相同:</p><blockquote><p><font color="red">[+1] = [00000001]原 = [00000001]反 = [00000001]补</font></p></blockquote><p>所以不需要过多解释. 但是对于负数:</p><blockquote><p><font color="red">[-1] = [10000001]原 = [11111110]反 = [11111111]补</p></blockquote><p><strong>可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?</strong></p><blockquote><p>首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了.</p></blockquote><p>于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:</p><p>计算十进制的表达式: 1-1=0</p><blockquote><p><strong>1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2</strong></p></blockquote><p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.</p><p>为了解决原码做减法的问题, 出现了反码:</p><p>计算十进制的表达式: 1-1=0</p><blockquote><p><strong>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0</strong></p></blockquote><p>发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]原和[1000 0000]原两个编码表示0.</p><p>于是补码的出现, 解决了0的符号以及两个编码的问题:</p><blockquote><p>1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原</p></blockquote><p>这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:</p><blockquote><p><strong>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补</strong></p></blockquote><p>-1-127的结果应该是-128, 在用补码运算的结果中, [1000 0000]补 就是-128. 但是注意因为实际上是使用以前的-0的补码来表示-128, 所以-128并没有原码和反码表示.(对-128的补码表示[1000 0000]补算出来的原码是[0000 0000]原, 这是不正确的)</p><p>使用补码, 不仅仅修复了0的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么8位二进制, 使用原码或反码表示的范围为[-127, +127], 而使用补码表示的范围为[-128, 127].</p><p>因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-231, 231-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小值.</p><h3 id="四-原码-反码-补码-再深入"><a href="#四-原码-反码-补码-再深入" class="headerlink" title="四 原码, 反码, 补码 再深入"></a><font color="red">四 原码, 反码, 补码 再深入</h3><p>计算机巧妙地把符号位参与运算, 并且将减法变成了加法, 背后蕴含了怎样的数学原理呢?</p><p>将钟表想象成是一个1位的12进制数. 如果当前时间是6点, 我希望将时间设置成4点, 需要怎么做呢?我们可以:</p><blockquote><ol><li>往回拨2个小时: 6 - 2 = 4</li><li>往前拨10个小时: (6 + 10) mod 12 = 4</li><li>往前拨10+12=22个小时: (6+22) mod 12 =4</li></ol></blockquote><p>2,3方法中的mod是指取模操作, 16 mod 12 =4 即用16除以12后的余数是4.</p><p>所以钟表往回拨(减法)的结果可以用往前拨(加法)替代!</p><p>现在的焦点就落在了如何用一个正数, 来替代一个负数. 上面的例子我们能感觉出来一些端倪, 发现一些规律. 但是数学是严谨的. 不能靠感觉.</p><p>首先介绍一个数学中相关的概念: 同余</p><h6 id="同余的概念"><a href="#同余的概念" class="headerlink" title="同余的概念"></a><font color="red">同余的概念</h6><p>两个整数a，b，若它们除以整数m所得的余数相等，则称a，b对于模m同余</p><p>记作 a ≡ b (mod m)</p><p>读作 a 与 b 关于模 m 同余。</p><p>举例说明:</p><blockquote><p>4 mod 12 = 4<br>16 mod 12 = 4<br>28 mod 12 = 4</p></blockquote><p>所以4, 16, 28关于模 12 同余.</p><h6 id="负数取模"><a href="#负数取模" class="headerlink" title="负数取模"></a><font color="red">负数取模</h6><p>正数进行mod运算是很简单的. 但是负数呢?</p><p>下面是关于mod运算的数学定义:<br><img src="https://img-blog.csdnimg.cn/2020052310050149.png" alt="在这里插入图片描述"></p><p>上面是截图, “取下界”符号找不到如何输入(word中粘贴过来后乱码). 下面是使用”L”和”」”替换上图的”取上下界”符号:</p><blockquote><p>x mod y = x - y L x / y 」</p></blockquote><p>上面公式的意思是:</p><p>x mod y等于 x 减去 y 乘上 x与y的商的下界.</p><p>以 -3 mod 2 举例:</p><blockquote><p>-3 mod 2<br>= -3 - 2xL -3/2 J<br>= -3 - 2xL-1.5J<br>= -3 - 2x(-2)<br>= -3 + 4 = 1</p></blockquote><p>所以:</p><blockquote><p>(-2) mod 12 = 12-2=10<br>(-4) mod 12 = 12-4 = 8<br>(-5) mod 12 = 12 - 5 = 7</p></blockquote><p>开始证明<br>再回到时钟的问题上:</p><blockquote><p>回拨2小时 = 前拨10小时<br>回拨4小时 = 前拨8小时<br>回拨5小时= 前拨7小时<br>注意, 这里发现的规律!</p></blockquote><p>结合上面学到的同余的概念.实际上:</p><blockquote><p>(-2) mod 12 = 10<br>10 mod 12 = 10</p></blockquote><p>-2与10是同余的.</p><blockquote><p>(-4) mod 12 = 8<br>8 mod 12 = 8</p></blockquote><p>-4与8是同余的.</p><p>距离成功越来越近了. 要实现用正数替代负数, 只需要运用同余数的两个定理:</p><p>反身性:</p><blockquote><p>a ≡ a (mod m)</p></blockquote><p>这个定理是很显而易见的.</p><p>线性运算定理:</p><blockquote><p>如果a ≡ b (mod m)，c ≡ d (mod m) 那么:<br>(1)a ± c ≡ b ± d (mod m)<br>(2)a * c ≡ b * d (mod m)</p></blockquote><p>如果想看这个定理的证明, 请看:<a href="http://baike.baidu.com/view/79282.htm" target="_blank" rel="noopener">http://baike.baidu.com/view/79282.htm</a></p><p>所以:</p><blockquote><p>7 ≡ 7 (mod 12)<br>(-2) ≡ 10 (mod 12)<br>7 -2 ≡ 7 + 10 (mod 12)</p></blockquote><p>现在我们为一个负数, 找到了它的正数同余数. 但是并不是7-2 = 7+10, 而是 7 -2 ≡ 7 + 10 (mod 12) , 即计算结果的余数相等.</p><p>接下来回到二进制的问题上, 看一下: 2-1=1的问题.</p><blockquote><p>2-1=2+(-1) = [0000 0010]原 + [1000 0001]原= [0000 0010]反 + [1111 1110]反</p></blockquote><p>先到这一步, -1的反码表示是1111 1110. 如果这里将[1111 1110]认为是原码, 则[1111 1110]原 = -126, 这里将符号位除去, 即认为是126.</p><p>发现有如下规律:</p><blockquote><p>(-1) mod 127 = 126<br>126 mod 127 = 126</p></blockquote><p>即:</p><blockquote><p>(-1) ≡ 126 (mod 127)<br>2-1 ≡ 2+126 (mod 127)</p></blockquote><p>2-1 与 2+126的余数结果是相同的! 而这个余数, 正式我们的期望的计算结果: 2-1=1</p><p>所以说一个数的反码, 实际上是这个数对于一个膜的同余数. 而这个膜并不是我们的二进制, 而是所能表示的最大值! 这就和钟表一样, 转了一圈后总能找到在可表示范围内的一个正确的数值!</p><p>而2+126很显然相当于钟表转过了一轮, 而因为符号位是参与计算的, 正好和溢出的最高位形成正确的运算结果.</p><p>既然反码可以将减法变成加法, 那么现在计算机使用的补码呢? 为什么在反码的基础上加1, 还能得到正确的结果?</p><blockquote><p>2-1=2+(-1) = [0000 0010]原 + [1000 0001]原 = [0000 0010]补 + [1111 1111]补</p></blockquote><p>如果把[1111 1111]当成原码, 去除符号位, 则:</p><blockquote><p>[0111 1111]原 = 127</p></blockquote><p>其实, 在反码的基础上+1, 只是相当于增加了膜的值:</p><blockquote><p>(-1) mod 128 = 127<br>127 mod 128 = 127<br>2-1 ≡ 2+127 (mod 128)</p></blockquote><p>此时, 表盘相当于每128个刻度转一轮. 所以用补码表示的运算结果最小值和最大值应该是[-128, 128].</p><p>但是由于0的特殊情况, 没有办法表示128, 所以补码的取值范围是[-128, 127]</p><p>本人一直不善于数学, 所以如果文中有不对的地方请大家多多包含, 多多指点!</p><ul><li><font color="red"><strong>转载于：</strong><blockquote><p>作者：张子秋<br>出处：<a href="http://www.cnblogs.com/zhangziqiu/" target="_blank" rel="noopener">http://www.cnblogs.com/zhangziqiu/</a><br>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用GitHub和hexo搭建个人博客</title>
      <link href="/2020/05/19/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/05/19/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="一，准备工作"><a href="#一，准备工作" class="headerlink" title="一，准备工作"></a>一，准备工作</h3><ul><li><strong>安装:<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></strong><ul><li><a href="https://www.bilibili.com/video/BV11V411o7Zh" target="_blank" rel="noopener">安装及配置环境教程</a></li><li>利用 <strong>npm</strong> 安装国内淘宝镜像 <strong>cnpm</strong>，下载插件的速度会很可观。<strong>指令为：</strong><pre class=" language-powershell"><code class="language-powershell">  npm install <span class="token operator">-</span>g cnpm <span class="token operator">--</span>registry=https:<span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org</code></pre></li><li>全局安装 <strong>hexo</strong> 博客,<strong>指令为：</strong><pre class=" language-powershell"><code class="language-powershell">  cnpm install hexo<span class="token operator">-</span><span class="token function">cli</span> <span class="token operator">-</span>g</code></pre></li></ul></li><li>创建Github账号</li><li><strong>安装:<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></strong><ul><li><a href="https://blog.csdn.net/weixin_44950987/article/details/102619708" target="_blank" rel="noopener">Git的安装及使用教程（超详细）</a><h3 id="二，建立博客"><a href="#二，建立博客" class="headerlink" title="二，建立博客"></a>二，建立博客</h3></li></ul></li><li>在资源管理器中你认为理想的位置建立一个存放博客的文件夹 <strong>_blog</strong></li><li>在blog文件夹中右键进入<strong>Git Bush Here</strong></li><li>敲入指令：<strong>hexo init</strong>（初始化博客）<br><img src="https://img-blog.csdnimg.cn/2020051917391249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vZmVpZ2VnZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020051917391241.png" alt="在这里插入图片描述"></li><li>安装依赖包,指令为： <strong>npm install</strong></li><li>本地启动hexo博客，指令为：<strong>hexo s(hexo start)</strong>     &emsp;&emsp;就可以在本地浏览器输入<strong>localhost:4000</strong> 来查看结果<br><img src="https://img-blog.csdnimg.cn/20200519174805225.png" alt="在这里插入图片描述">  <img src="https://img-blog.csdnimg.cn/2020051917484663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vZmVpZ2VnZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">  <h3 id="三，部署到Github上"><a href="#三，部署到Github上" class="headerlink" title="三，部署到Github上"></a>三，部署到Github上</h3></li><li>在Github上建立部署博客的仓库，而且仓库名格式必须为：<strong>用户名.github.io</strong><br><img src="https://img-blog.csdnimg.cn/2020051918362797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vZmVpZ2VnZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>修改配置文件<ul><li>复制链接<br><img src="https://img-blog.csdnimg.cn/20200519183549515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vZmVpZ2VnZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>打开 <strong>_blog/_config.yml</strong> ,翻到文件的最底下，修改并添加如下代码：<pre class=" language-powershell"><code class="language-powershell">deploy:<span class="token function">type</span>: gitrepo: git@github<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>mofi<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git<span class="token comment" spellcheck="true">#此位置为上边复制的仓库连接</span>branch: master</code></pre></li></ul></li><li>一键部署<ul><li>通过 hexo-deployer-git 插件可以实现一键将博客同时部署到多个git仓库中。如同时发布到github及gitee提供的pages服务。  </li></ul></li></ul><pre><code>    ```yaml    cnpm install hexo-deployer-git --save    ```</code></pre><ul><li>清除缓存文件：<strong>hexo clean</strong><br>&emsp;<strong>[注]</strong> 有时候部署的文件博客页面没发生变化，这时你就可以先清除一下缓存，然后用下边那个指令再发布到Github上。</li><li>通过指令 <strong>hexo g -d</strong> 即可实现一键发布，并更新CDN缓存。</li></ul><blockquote><p>hexo g 全拼为 hexo generate  意义是：生成静态文件<br>hexo -d 全拼为 hexo -deploy  意义是：文件生成后立即部署网站  </p></blockquote><p><strong>至此，个人博客就搭建完成了，但是呢还没有完，因为还有更换博客主题（其中的样式，特效等等），发布文章等着你去探索。当然，主题我也已经给你找好了，如果不喜欢，可以到hexo主题官网去寻找心仪的主题。</strong></p><ul><li><p><strong>传送门：</strong> <a href="https://blog.csdn.net/jspnetcn/article/details/104111651" target="_blank" rel="noopener">基于Hexo的matery主题搭建博客并优化</a></p></li><li><p><strong>传送门：</strong>  <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo主题官网</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL_第一节</title>
      <link href="/2020/05/18/mysql_1/"/>
      <url>/2020/05/18/mysql_1/</url>
      
        <content type="html"><![CDATA[<h3 id="一-数据库基础"><a href="#一-数据库基础" class="headerlink" title="一,数据库基础"></a>一,数据库基础</h3><ul><li><strong>数据库（database）</strong>    保存有组织的数据的容器（通常是一个文件或一组文件）。<ul><li>【注】通常使用数据库这个术语代表所使用的数据库软件，其实这是不正确的，确切地说，数据库软件应称为<strong>DBMS（数据库管理系统）</strong>，数据库是通过DBMS创建和操纵的容器。</li></ul></li><li><strong>表（table）</strong>    某种特定类型数据的结构化清单。<ul><li><strong>列（column）</strong>    表中的一个字段。所有表都是由一个或多个列组成的。</li><li><strong>行（row）</strong>    表中的一个记录。</li></ul></li><li><strong>数据类型（datatype）</strong>    所容许的数据的类型。每个表列都有相应的数据类型，，它限制（或容许）该列中存储的数据。</li><li><strong>主键（primary key）</strong>        一列（或一组列），其值能够唯一区分表中每个行。<br>作为主键应满足的条件：<ul><li>任意两行都不具有相同的主键值</li><li>每个行都必须具有一个主键值（主键列不允许为NULL值）<h3 id="二，使用mysql命令行实用程序的注意点"><a href="#二，使用mysql命令行实用程序的注意点" class="headerlink" title="二，使用mysql命令行实用程序的注意点"></a>二，使用mysql命令行实用程序的注意点</h3></li></ul></li><li>命令输入在 <strong>mysql&gt;</strong> 之后</li><li>命令用 <strong>;</strong> 或 <strong>\g</strong> 结束，换句话说，仅按Enter不执行命令</li><li>输入 <strong>help</strong> 或 <strong>\h</strong> 获得帮助，也可以输入更多的文本获得特定命令的帮助（如，输入help select获得使用SELECT语句的帮助）</li><li>输入 <strong>quit</strong> 或 <strong>exit</strong> 退出命令行实用程序<h3 id="三，使用MySQL"><a href="#三，使用MySQL" class="headerlink" title="三，使用MySQL"></a>三，使用MySQL</h3></li><li><strong>SHOW DATABASES;</strong>    返回可用数据库的一个列表。 <pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span></code></pre></li></ul><pre><code>```sql+------------------------------+| Database                     |+------------------------------+| information_schema           || jspmysql                     || mysql                        || test                         |+------------------------------+</code></pre><ul><li><strong>选择数据库</strong></li></ul><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">USE</span> test<span class="token punctuation">;</span><span class="token keyword">Database</span> changed</code></pre><blockquote><p>使用 <strong>“USE  数据库名称”</strong> 的形式使用数据库,USE语句并不返回任何结果。依赖于使用的客户机，显示某种形式的通知。例如，这里显示出的Database changed消息是mysql命令行实用程序在数据库选择成功后显示的。</p></blockquote><ul><li>使用 <strong>“SHOW TABLES;”</strong> 或 <strong>“SHOW TABELS FROM 数据库名;”</strong>  返回当前选择的数据库内可用的列表。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------+</span><span class="token operator">|</span> Tables_in_mysql           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------+</span><span class="token operator">|</span> columns_priv              <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">db</span>                        <span class="token operator">|</span><span class="token operator">|</span> event                     <span class="token operator">|</span><span class="token operator">|</span> func                      <span class="token operator">|</span><span class="token operator">|</span> general_log               <span class="token operator">|</span><span class="token operator">|</span> help_category             <span class="token operator">|</span><span class="token operator">|</span> help_keyword              <span class="token operator">|</span><span class="token operator">|</span> help_relation             <span class="token operator">|</span><span class="token operator">|</span> help_topic                <span class="token operator">|</span><span class="token operator">|</span> host                      <span class="token operator">|</span><span class="token operator">|</span> ndb_binlog_index          <span class="token operator">|</span><span class="token operator">|</span> plugin                    <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">proc</span>                      <span class="token operator">|</span><span class="token operator">|</span> procs_priv                <span class="token operator">|</span><span class="token operator">|</span> servers                   <span class="token operator">|</span><span class="token operator">|</span> slow_log                  <span class="token operator">|</span><span class="token operator">|</span> tables_priv               <span class="token operator">|</span><span class="token operator">|</span> time_zone                 <span class="token operator">|</span><span class="token operator">|</span> time_zone_leap_second     <span class="token operator">|</span><span class="token operator">|</span> time_zone_name            <span class="token operator">|</span><span class="token operator">|</span> time_zone_transition      <span class="token operator">|</span><span class="token operator">|</span> time_zone_transition_type <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">user</span>                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------+</span></code></pre><ul><li><strong>“SHOW STATUS;”</strong>    用于显示广泛的服务器状态信息</li><li><strong>“SHOW CREATE DATABASE;”</strong> 和 <strong>“SHOW CREATE TABLE;</strong> 分别用来显示创建特定数据库或表的MySQL语句</li><li><strong>“SHOW GRANTS;”</strong> 用来显示授予用户（所有用户或特定用户）的安全权限</li><li><strong>“SHOW ERRORS”</strong> 和 <strong>“SHOW WARNINGS;”</strong> 用来显示服务器错误或警告消息</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/17/hello-world/"/>
      <url>/2020/05/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! 这是您的第一篇文章。 查看 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">文档</a> 以获得更多信息。如果你在使用Hexo时遇到任何问题，可以在 <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">故障排除troubleshooting</a> 中找到答案，或者去询问大神。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新文档"><a href="#创建新文档" class="headerlink" title="创建新文档"></a>创建新文档</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>更多信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">写作</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">服务器</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating/生成</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">部署</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
